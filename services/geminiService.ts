import { GoogleGenAI, Modality } from "@google/genai";
import type { Part } from "@google/genai";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const base64ToGenerativePart = (base64Data: string): Part => {
    const match = base64Data.match(/data:(.*);base64,(.*)/);
    if (!match) {
        throw new Error("Invalid base64 string");
    }
    const mimeType = match[1];
    const data = match[2];
    
    return {
        inlineData: {
            data,
            mimeType
        },
    };
};

const generateSingleImage = async (prompt: string, imageParts: Part[]): Promise<string> => {
    const parts: Part[] = [...imageParts, { text: prompt }];

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: { parts: parts },
        config: {
            responseModalities: [Modality.IMAGE],
        },
    });
    
    for (const part of response.candidates?.[0]?.content.parts ?? []) {
        if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            const mimeType = part.inlineData.mimeType;
            return `data:${mimeType};base64,${base64ImageBytes}`;
        }
    }
    
    throw new Error("No image was generated by the API in this batch.");
};

export const generateMarvellaImages = async (prompt: string, base64Images: string[]): Promise<string[]> => {
    try {
        const imageParts: Part[] = base64Images.map(base64ToGenerativePart);
        
        // Create an array of 4 promises to generate images in parallel
        const imagePromises: Promise<string>[] = Array(4).fill(0).map(() => 
            generateSingleImage(prompt, imageParts)
        );
        
        // Wait for all promises to resolve
        const imageUrls = await Promise.all(imagePromises);
        
        return imageUrls;

    } catch (error) {
        console.error("Error generating images with Gemini API:", error);
        if (error instanceof Error) {
            throw new Error(`Failed to generate images: ${error.message}`);
        }
        throw new Error("An unknown error occurred during image generation.");
    }
};